@charset "utf-8";
@import "compass/css3";
@import "compass/typography/vertical_rhythm";


// **Global
// $base-font-size but in your output unit of choice. Defaults to 1em when $relative-font-sizing is true.
$font-unit: if($relative-font-sizing, 1em, $base-font-size);
// To enable SVG gradient support in Opera and IE9
$experimental-support-for-svg: true;
// Determines if you want to include magic selectors in your sprites
$disable-magic-sprite-selectors:true;
// Resolution
$FHD: 1920px;
$WXGA-plus: 1680px;
$HD: 1366px;
$WXGA: 1280px;
$XGA-landscape: 1024px;
$XGA-portrait: 768px;
$VGA: 640px;
$HVGA: 480px;
$QVGA: 320px;
// Vendor Extension Prefixes Placeholders
$prefixPlaceholders: ":-moz-placeholder", "::-moz-placeholder", "::-webkit-input-placeholder", ":-ms-input-placeholder";

// **Brief

$baseFontFamily: Arial, Helvetica, sans-serif;
$baseFontSize: $base-font-size;
$baseFontColor: #444;
$baseLinkColor: #287fc3;

$size: 960px;

$Max: $size;
$standard: $size;
$Min: $QVGA;

// --footer--
$footerHeight: 100px;

// --icons sprite--
// $icons:
// name
// ;
// $blocks:
// name
// ;
// $befores:
// name
// ;
// $afters:
// name
// ;
// $buttons:
// name
// ;

// **Formstyle

// --fields--
// size
$fieldWidth: 210px;
$fieldHeight: 30px;
// typography
$fieldPlaceholderColor: #777;

// --buttons--
// size
$btnHeight: false;

// Mixins

// --Responsive Web Design *width*--
@mixin rwd-width($el-width, $parent-width: $standard) {
    width: $el-width * 100% / $parent-width;
}
@function rwd-width-val($el-width, $parent-width: $standard){
    @return $el-width * 100% / $parent-width;
}
// --Responsive Web Design *font-size*--
@mixin adjust-font-size-to($to-size, $lines: lines-for-font-size($to-size), $from-size: $base-font-size) {
    @if not $relative-font-sizing and $from-size != $base-font-size {
        @warn "$relative-font-sizing is false but a relative font size was passed to adjust-font-size-to";
    }
    font-size: $font-unit * $to-size / $from-size;
}
@function adjust-font-size-to-val($to-size, $lines: lines-for-font-size($to-size), $from-size: $base-font-size){
    @if not $relative-font-sizing and $from-size != $base-font-size {
        @warn "$relative-font-sizing is false but a relative font size was passed to adjust-font-size-to";
    }
    @return $font-unit * $to-size / $from-size;
}
// --Animation
@mixin animation($name, $value) {
    @include experimental(animation, $name $value, -moz, -webkit, -o, -ms, not -khtml);
}
@mixin keyframes($name) {
    @-webkit-keyframes #{$name} {
        @content;
    }
    @-moz-keyframes #{$name} {
        @content;
    }
    @-ms-keyframes #{$name} {
        @content;
    }
    @keyframes #{$name} {
        @content;
    }
}
// --Validation
@mixin validation($color, $bg, $border: $color){
    border-color: $border;
    background-color: $bg;
    color: $color;
}
// Placeholder
@mixin placeholder($name, $color, $attr: false){
    &#{$name}{
        opacity: 1;
        @include transition(opacity .3s ease);
        text-overflow:ellipsis;
        color: $color;
    }
    @if $attr{
        &#{$name}:focus{
            opacity: 0;
        }
    }
    @else{
        &:focus#{$name}{
            opacity: 0;
        }
    }
}
// Pseudo
@mixin pseudo-style{
    content: '';
    position: absolute;
}
// Align icons
@mixin align-icon($top){
    position: relative;
    top: -#{$top}px;
}
// Arrows
@mixin arrow($side, $width, $height, $color, $once: true, $pos: true){
    $mirrorSide: null;
    $top: "top";
    $right: "right";
    $bottom: "bottom";
    $left: "left";

    @if $side == $top { $mirrorSide: $bottom; }
    @else if $side == $right { $mirrorSide: $left; }
    @else if $side == $bottom{ $mirrorSide: $top; }
    @else{ $mirrorSide: $right; }

    @if $once{
        @include pseudo-style;
    }

    @if $pos{
        $secPos: null;
        @if $side == $top or $side == $bottom{ $secPos: $left}
        @else{ $secPos: $top }

        #{$side}: 100%;
        #{$secPos}: 50%;
        margin-#{$secPos}: -#{$width}/2;
    }
    @else{
        @content;
    }

    border: $width solid transparent;
    border:{
        #{$side}:{
            width: $height;
            color: $color;
        }
        #{$mirrorSide}:{
            width: 0;
        }
    }
}